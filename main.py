from aiogram import executor, types
from configs import dispatcher, bot, resize_image, BotStates
from buttons import InlineButtons, Buttons
from aiogram.types import Message, CallbackQuery, message
from db import PostgreSQL

btns = Buttons()
ibtns = InlineButtons()


@dispatcher.message_handler(commands=["start"], state='*')
async def welcome(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_sticker = open('/home/azatot/Desktop/tenor.gif', 'rb')

    await bot.send_animation(
        chat_id=message.from_user.id,
        animation=welcome_sticker
    )

    return await bot.send_message(
        chat_id=message.from_user.id,
        text=f'''
        *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}*
        –ö–æ–º–ø–∞–Ω–∏—è Resto —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ–º –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ!
        –í–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
        ''',
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=btns.main_buttons()
    )



@dispatcher.message_handler(content_types=["text"])
async def main_response(message: Message):
    """–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, –µ–º—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –Ω–∞ –≤—ã–Ω–æ—Å üçï':
       
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é –∑–∞–∫–∞–∑–∞..."
        )

    elif message.text == '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ ‚è∞':
       
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫..."
        )
    
    elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é üóí':
       
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="üòãüòãüòãüòãüòã –û—Å–Ω–æ–≤–Ω–æ–µ –ú–µ–Ω—é üç¥ üòãüòãüòãüòãüòã",
            reply_markup=ibtns.show_menu_buttons()
        )

    elif message.text == '–û—Ç–∑—ã–≤—ã ‚úÖ':
       
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=btns.feedback_buttons()
        )



@dispatcher.callback_query_handler()
async def show_menu(callback: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
        –í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–∂–∞—Ç–æ–π inline-–∫–Ω–æ–ø–∫–∏."""
    psql = PostgreSQL()

    if callback.data == 'breakfast':
        for breakfast in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meals',
            {"meal_type": 2}
        ):
            image = resize_image(breakfast[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{breakfast[0]}*\n_–¶–µ–Ω–∞:_ *{breakfast[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((breakfast[-1], breakfast[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )

    elif callback.data == 'lunch':
        for lunch in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meals',
            {"meal_type": 3}
        ):
            image = resize_image(lunch[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{lunch[0]}*\n_–¶–µ–Ω–∞:_ *{lunch[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((lunch[-1], lunch[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )

    elif callback.data == 'dinner':
        for dinner in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meals',
            {"meal_type": 4}
        ):
            image = resize_image(dinner[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{dinner[0]}*\n_–¶–µ–Ω–∞:_ *{dinner[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((dinner[-1], dinner[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )


    elif callback.data == 'primary_meal':
        for primary_meal in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meal',
            {"meal_type": 1}
        ):
            image = resize_image(primary_meal[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{primary_meal[0]}*\n_–¶–µ–Ω–∞:_ *{primary_meal[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((primary_meal[-1], primary_meal[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )


if __name__ == '__main__':
    executor.start_polling(dispatcher=dispatcher)

# sudo apt-get install build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev python3.8-dev python3.9-dev